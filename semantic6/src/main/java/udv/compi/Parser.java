
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package udv.compi;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\004\000\002\002\007\000\002\006" +
    "\005\000\002\006\003\000\002\007\005\000\002\007\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\005\000" +
    "\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\026\000\004\015\005\001\002\000\004\002\030\001" +
    "\002\000\004\021\006\001\002\000\004\016\007\001\002" +
    "\000\012\006\011\012\013\022\016\023\010\001\002\000" +
    "\012\007\ufffb\013\ufffb\014\ufffb\017\ufffb\001\002\000\012" +
    "\006\011\012\013\022\016\023\010\001\002\000\012\007" +
    "\ufffe\013\ufffe\014\022\017\ufffe\001\002\000\004\021\024" +
    "\001\002\000\012\007\ufffc\013\ufffc\014\ufffc\017\ufffc\001" +
    "\002\000\006\013\017\017\020\001\002\000\012\007\ufffa" +
    "\013\ufffa\014\ufffa\017\ufffa\001\002\000\012\006\011\012" +
    "\013\022\016\023\010\001\002\000\004\002\000\001\002" +
    "\000\012\007\uffff\013\uffff\014\022\017\uffff\001\002\000" +
    "\012\006\011\012\013\022\016\023\010\001\002\000\012" +
    "\007\ufffd\013\ufffd\014\ufffd\017\ufffd\001\002\000\004\012" +
    "\025\001\002\000\012\007\ufff9\013\ufff9\014\ufff9\017\ufff9" +
    "\001\002\000\006\007\027\013\017\001\002\000\012\007" +
    "\ufff8\013\ufff8\014\ufff8\017\ufff8\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\026\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\014\007\011" +
    "\010\013\001\001\000\002\001\001\000\010\006\025\007" +
    "\011\010\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\020\010\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		tipo start_val = (tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= TIPO ID IGUAL E PYC 
            {
              tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		tipo e = (tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(t.equals("int") && e.tipov==2){
			System.out.println("Error semántico, no se puede asignar eld double: " + e.valorD + " a la variable "+d);
		}else if(t.equals("int") && e.tipov==3){
			System.out.println("Error semántico, no se puede asignar la cadena: " + e.valorS + " a la variable "+d);
		}else if(t.equals("double") && e.tipov==3){
			System.out.println("Error semántico, no se puede asignar la cadena: " + e.valorS + " a la variable "+d);
		}else{
			System.out.println("Asignación realizada con éxito a la variable "+ d);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // E ::= E PLUS T 
            {
              tipo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		tipo e1 = (tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		tipo t = (tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		tipo aux = new tipo();

		if(e1.tipov == 1 && t.tipov == 1){
			aux.tipov=1;
			aux.valorI = e1.valorI+t.valorI;
			aux.valorD = 0;
			aux.valorS = "";
		}else if(e1.tipov == 1 && t.tipov == 2){
			aux.tipov=2;
			aux.valorI = 0;
			aux.valorD = e1.valorI + t.valorD;
			aux.valorS = "";
		}else if(e1.tipov == 1 && t.tipov == 3){
			aux.tipov=3;
			aux.valorI = 0;
			aux.valorD = 0;
			aux.valorS = e1.valorI + t.valorS;
		}else if(e1.tipov == 2 && t.tipov == 1){
			aux.tipov=2;
			aux.valorI = 0;
			aux.valorD = e1.valorD + t.valorI;
			aux.valorS = "";
		}else if(e1.tipov == 2 && t.tipov == 2){
			aux.tipov=2;
			aux.valorI = 0;
			aux.valorD = e1.valorD + t.valorD;
			aux.valorS = "";
		}else if(e1.tipov == 2 && t.tipov == 3){
			aux.tipov=3;
			aux.valorI = 0;
			aux.valorD = 0;
			aux.valorS = e1.valorD + t.valorS;
		}else if(e1.tipov == 3 && t.tipov == 1){
			aux.tipov=3;
			aux.valorI = 0;
			aux.valorD = 0;
			aux.valorS = e1.valorI + t.valorS;
		}else if(e1.tipov == 3 && t.tipov == 2){
			aux.tipov=3;
			aux.valorI = 0;
			aux.valorD = 0;
			aux.valorS = e1.valorD + t.valorS;
		}else if(e1.tipov == 3 && t.tipov == 3){
			aux.tipov=3;
			aux.valorI = 0;
			aux.valorD = 0;
			aux.valorS = e1.valorS + t.valorS;
		}else{
			aux.tipov=-1;
			aux.valorI = 0;
			aux.valorD = 0;
			aux.valorS = "Error semántico";
		}
		RESULT =aux;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // E ::= T 
            {
              tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		tipo t = (tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			tipo aux = new tipo();
			aux.tipov=t.tipov;
			aux.valorI = t.valorI;
			aux.valorD = t.valorD;
			aux.valorS = t.valorS;
			RESULT = aux;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // T ::= T PRO F 
            {
              tipo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		tipo t1 = (tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		tipo f = (tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		tipo aux = new tipo();

		if(t1.tipov == 1 && f.tipov == 1){
			aux.tipov=t1.tipov;
			aux.valorI = t1.valorI*f.valorI;
			aux.valorD = 0;
			aux.valorS = "";
		}else if(t1.tipov == 1 && f.tipov == 2){
			aux.tipov=2;
			aux.valorI = 0;
			aux.valorD = t1.valorI*f.valorD;
			aux.valorS = "";
		}else if(t1.tipov == 2 && f.tipov == 1){
			aux.tipov=2;
			aux.valorI = 0;
			aux.valorD = t1.valorD*f.valorI;
			aux.valorS = "";
		}else if(t1.tipov == 2 && f.tipov == 2){
			aux.tipov=2;
			aux.valorI = 0;
			aux.valorD = t1.valorD*f.valorD;
			aux.valorS = "";
		}else{
			aux.tipov=-1;
			aux.valorI = 0;
			aux.valorD = 0;
			aux.valorS = "Error semántico";
		}
		RESULT =aux;
		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // T ::= F 
            {
              tipo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		tipo f = (tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			tipo aux = new tipo();
			aux.tipov=f.tipov;
			aux.valorI = f.valorI;
			aux.valorD = f.valorD;
			aux.valorS = f.valorS;
			RESULT = aux;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // F ::= NUM 
            {
              tipo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			tipo aux = new tipo();
			aux.tipov=1;
			aux.valorI = Integer.parseInt(n);
			aux.valorD = 0;
			aux.valorS = "";
			RESULT = aux;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // F ::= DOU 
            {
              tipo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			tipo aux = new tipo();
			aux.tipov=2;
			aux.valorI = 0;
			aux.valorD = Double.parseDouble(n);
			aux.valorS = "";
			RESULT = aux;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // F ::= COMILLA ID COMILLA 
            {
              tipo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			tipo aux = new tipo();
			aux.tipov=3;
			aux.valorI = 0;
			aux.valorD = 0;
			aux.valorS = n;
			RESULT = aux;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // F ::= CA E CC 
            {
              tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		tipo e = (tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
